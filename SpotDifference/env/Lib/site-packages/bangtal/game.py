from ctypes import *
from bangtal.singleton import *

import enum

class EventID(enum.Enum):
	ENTER_SCENE		        = 1
	LEAVE_SCENE		        = 2
	PICK_OBJECT		        = 3
	DROP_OBJECT		        = 4
	COMBINE_OBJECT          = 5
	DISMANTLE_OBJECT        = 6
	TIMER                   = 101
	KEYPAD                  = 102
	SOUND                   = 103

class MouseAction(enum.Enum):
	CLICK			    	= 0
	DRAG_UP		        	= 1
	DRAG_DOWN			    = 2
	DRAG_LEFT			    = 3
	DRAG_RIGHT		        = 4

class GameOption(enum.Enum):
	ROOM_TITLE              = 1
	INVENTORY_BUTTON        = 2
	MESSAGE_BOX_BUTTON      = 3

class GameImpl:
    _bt = None

    def __init__(self):
        self._bt = windll.LoadLibrary("Bangtal")

    def startGame(self, scene):
        self._bt._startGame(scene)

    def enterScene(self, scene):
        self._bt._enterScene(scene)

    def endGame(self):
        self._bt._endGame()

    def createScene(self, name, file):
        return self._bt._createScene(name, file)

    def setSceneImage(self, scene, file):
        self._bt._setSceneImage(scene, file)

    def setSceneLight(self, scene, light):
        self._bt._setSceneLight(scene, c_float(light))

    def createObject(self, file):
        return self._bt._createObject(file)

    def setObjectImage(self, object, file):
        self._bt._setObjectImage(object, file)

    def locateObject(self, object, scene, x, y):
        self._bt._locateObject(object, scene, x, y)

    def scaleObject(self, object, scale):
        self._bt._scaleObject(object, c_float(scale))

    def showObject(self, object):
        self._bt._showObject(object)

    def hideObject(self, object):
        self._bt._hideObject(object)

    def pickObject(self, object):
        self._bt._pickObject(object)

    def dropObject(self, object):
        self._bt._dropObject(object)

    def defineCombination(self, object1, object2, object3):
        self._bt._defineCombination(object1, object2, object3)

    def getHandObject(self):
        return self._bt._getHandObject()

    def showMessage(self, message):
        self._bt._showMessage(message)

    def showKeypad(self, password, object):
        self._bt._showKeypad(password, object)

    def showImageViewer(self, file):
        self._bt._showImageViewer(file)

    def showAudioPlayer(self, file):
        self._bt._showAudioPlayer(file)

    def showVideoPlayer(self, file):
        self._bt._showVideoPlayer(file)

    def createSound(self, file):
        return self._bt._createSound(file)

    def playSound(self, sound, loop):
        self._bt._playSound(sound, loop)

    def stopSound(self, sound):
        self._bt._stopSound(sound)

    def createTimer(self, seconds):
        return self._bt._createTimer(c_float(seconds))

    def setTimer(self, timer, seconds):
        self._bt._setTimer(timer, c_float(seconds))

    def increaseTimer(self, timer, seconds):
        self._bt._increaseTimer(timer, c_float(seconds))

    def decreaseTimer(self, timer, seconds):
        self._bt._decreaseTimer(timer, c_float(seconds))

    def getTimer(self, timer):
        self._bt._getTimer.restype = c_float
        return self._bt._getTimer(timer)

    def startTimer(self, timer):
        self._bt._startTimer(timer)

    def stopTimer(self, timer):
        self._bt._stopTimer(timer)

    def showTimer(self, timer):
        self._bt._showTimer(timer)

    def hideTimer(self):
        self._bt._hideTimer()

    def setSceneCallback(self, callback):
        self._bt._setSceneCallback(callback)

    def setObjectCallback(self, callback):
        self._bt._setObjectCallback(callback)

    def setMouseCallback(self, callback):
        self._bt._setMouseCallback(callback)

    def setTimerCallback(self, callback):
        self._bt._setTimerCallback(callback)

    def setSoundCallback(self, callback):
        self._bt._setSoundCallback(callback)

    def setKeyboardCallback(self, callback):
        self._bt._setKeyboardCallback(callback)

    def setGameOption(self, option, value):
        self._bt._setGameOption(option.value, c_bool(value))

    def getGameOption(self, option):
        self._bt._getGameOption.restype = c_int32
        return bool(self._bt._getGameOption(option.value))

class GameServer(GameImpl, SingletonInstance):
    pass
